[gcode_macro HOME]
description: "Performs G28 if all axis are not homed."
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}


[gcode_macro G10]
description: "Retract filament. Default 2.5mm."
variable_parameter_retract_amt: -2.5
gcode:        
    # Parameters
    {% set retract_amt = params.retract_amt|default(-2.5)|float %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    g1 e{retract_amt} f3000
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    

[gcode_macro Center]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}
    g90
    g1 x175 y175 F30000

[gcode_macro PRINT_START]
variable_parameter_BED_TEMP: 60
variable_parameter_EXTRUDER_TEMP: 210
variable_parameter_EXTRUDER_STBY: 150
variable_parameter_CHAMBER: 60
gcode:        
    # Parameters
    ## SuperSlicer - print_start EXTRUDER={first_layer_temperature[initial_extruder] + extruder_temperature_offset[initial_extruder]} BED={first_layer_bed_temperature} EXTRUDE_RATE={100 * extrusion_multiplier} PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]}
    ## Cura - # BED_MESH_CALIBRATE PRINT_MIN=%MINX%,%MINY% PRINT_MAX=%MAXX%,%MAXY%
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}
    {% set EXTRUDER_STBY = params.EXTRUDER_STBY|default(150)|float %}
    {% set EXTRUDE_RATE = params.EXTRUDE_RATE|default(96)|float %}
    {% set CHAMBER = params.CHAMBER|default(60)|int %}
    {% set PRINT_MIN = params.PRINT_MIN|default(50,50)|int %}
    {% set PRINT_MAX = params.PRINT_MAX|default(300,300)|int %}
    {% set message  = params.PRINT_MIN %}
    { action_respond_info(message) }

    SET_NOZZLE_LEDS_ON
    STATUS_HEATING
    G28
    Dock_Probe_Unlock
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_STBY}
    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={CHAMBER}
    #{% if BED_TEMP > 70 %}
    #  SET_FAN_SPEED FAN=BedFans SPEED=1
    #{% endif %}
    #M190 S{BED_TEMP}; set & wait for bed temp
    #M109 S{EXTRUDER_STBY}
    ATTACH_PROBE_LOCK
    QUAD_GANTRY_LEVEL
    G0 Z10 F32000
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP-5}
    G28 Z
	  BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_STBY+30}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_STBY+25}
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER-10}   ; wait for chamber temp
    CALIBRATE_Z
    DOCK_PROBE_UNLOCK

    # Macros added by SuperSlicer
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M82 ; use absolute distances for extrusion
    G92 E0 ; reset extrusion distance

    G0 X150 Y350 Z10 F32000
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    M221 S{EXTRUDE_RATE}
    STATUS_HEATING
    HYPERLAPSE ACTION=START CYCLE=10
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}
    CLEAN_NOZZLE
    STATUS_PRINTING
    G0 X175 Y175 Z10 F32000
    M117 { "Starting Print..."  }
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
    
    ## -----------------Moved from Preheat to here--------------------------------
    #SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_TEMP|int}
    # Wait for extruder to reach 170. Bed is still heating to intended temp
    #TEMPERATURE_WAIT SENSOR=extruder MINIMUM=170
    # if chamber variable is not equal to zero, Wait for chamber temp
    #{% if CHAMBER != 0 %}
    #M117 
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}
    #{% endif %}
    #TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|int-10}
    ## -----------------Moved from Preheat to here--------------------------------

    #STATUS_CALIBRATING_Z
    #CLEAN_NOZZLE
    #CALIBRATE_Z
    
    #G0 X175 Y175 Z30 F32000
    #STATUS_PRINTING

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
   G10
   M400     ; wait for buffer to clear
   G92 E0   ; zero the extruder
   G91      ; Relative Postioning
   G1 E-2.5 F4000               
   G0 Z10 F30000          ;Raise 10mm                            
   G1 E-2.5 F2000              ; retract filament
   G90                            ; Absolute Positioning
   TURN_OFF_HEATERS
   M107                           ; turn off fan
   Dock_Probe_Unlock
   G28 Y          ; park nozzle at rear
   G0 X175 Y345
   #TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=200
   #CLEAN_NOZZLE
   BED_MESH_CLEAR
   SET_GCODE_OFFSET Z=0 
   SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target=60
   HYPERLAPSE ACTION=STOP
   BEDFANSSLOW
   UPDATE_DELAYED_GCODE ID=Stop_Fan DURATION=600

[gcode_macro PREHEAT]
variable_parameter_BED_TEMP: 60
variable_parameter_EXTRUDER_TEMP: 210
variable_parameter_EXTRUDER_STBY: 150
variable_parameter_CHAMBER: 40
gcode:
    # begin heating
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP|int}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_STBY|int}
    
    # Wait for bed to reach at least10 degrees below intended temp. Remove the '-10' to wait for it to reach temp.
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.BED_TEMP|int-10}

    #SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_TEMP|int}
    # Wait for extruder to reach 170. Bed is still heating to intended temp
    #TEMPERATURE_WAIT SENSOR=extruder MINIMUM=170
    # if chamber variable is not equal to zero, Wait for chamber temp
    #{% if CHAMBER != 0 %}
    #M117 
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}
    #{% endif %}
    #TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|int-10}

### SET CHAMBER TEMPERATURE
[gcode_macro M141]
description: Set Chamber temperature, S is Target temp, P is undefined.
variable_parameter_S: 0
variable_parameter_P: 0
gcode:
    {% set S = params.S|default(50)|float %}
    #{% set P = params.P|default(205)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={S}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  M106 S0   ;Turn off fans
  CANCEL_PRINT_BASE
  G91
  G10
  G1 X-2 Y-2 F300
  G1 Z10 F3000
  G28 Y
  G90
  G0 X175 Y345
  SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target=60
  HYPERLAPSE ACTION=STOP

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe+10} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 
  HYPERLAPSE ACTION=STOP


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

######################################################################
# Calibration
######################################################################

[gcode_macro SET_PA_ADVANCE]
variable_parameter_PA_TARGET: 0.05
gcode:
  {% set PA_TARGET = params.PA_TARGET | default(0.05) | float %}
  SET_PRESSURE_ADVANCE ADVANCE={PA_TARGET}


[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED



[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(110) | float %}
    {% set DURATION = (params.DURATION | default(60) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
    
    G90
    ;; put the bed and nozzle where they're a safe distance apart
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}
    G0 X175 Y340 Z50

    #M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }


[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            NOTE
            TURN_OFF_HEATERS
            M107 ; turn off fan

            #M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
            M117 { "soak X ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            #M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
            M117 { "soaked %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating - %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking - %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

######################################################################
# Common Tuning Commands
######################################################################
[gcode_macro AUTO_Z_CALIBRATE]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}
    ATTACH_PROBE_LOCK
    # QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}
    CALIBRATE_Z
    Dock_Probe_Unlock

[gcode_macro PID_TUNE_EXTRUDER]
variable_parameter_PID_TARGET: 210
gcode:
    {% set PID_TARGET = params.PID_TARGET | default(0) | int %}
    PID_CALIBRATE HEATER=extruder TARGET={PID_TARGET}

[gcode_macro PID_TUNE_BED]
variable_parameter_TARGET: 60
gcode:
    {% set PID_TARGET = params.PID_TARGET | default(0) | int %}
    PID_CALIBRATE HEATER=heater_bed TARGET={PID_TARGET}

[gcode_macro RESONANCE_CALIBRATE]
gcode:
  SHAPER_CALIBRATE

[gcode_macro M600] #Filament Change
description: Filament Change 
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    SONG_NEVER_GONNA_GIVE_YOU_UP
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD_FILAMENT] #Filament Change
description: Extrudes 20mm, Purges two three rows across the back for another 40mm then resumes (commented out).
gcode:
    G91 
    G1 E20 F2000
    G90
    G1 X230 Y220 Z.2 F3000
    G1 X10 E20 F1600
    G1 Y219.6 F3000
    G1 X220 E20 F1600
    #G1 Y219.2 F3000
    #G1 X10 E20 F1600
    G10
    G1 X230 F1600
    G1 Z20 F3000
    G1 X230 Y218 F3000
    #pause_resume
    

[delayed_gcode clear_display]
gcode:
  M117

[delayed_gcode Stop_Fan]
gcode:  
  BEDFANSOFF

######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.


#[gcode_macro M300]
#gcode:
    ## Use a default 1kHz tone if S is omitted.
    #{% set S = params.S|default(1000)|int %}
    ## Use a 10ms duration if P is omitted.
    #{% set P = params.P|default(100)|int %}
    #SET_PIN PIN=beeper VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    #G4 P{P}
    #SET_PIN PIN=beeper VALUE=0

[gcode_macro M300]
description: "Plays a beep sound.
  @param {int} [S=1000] - Frequency in Hz
  @param {int} [P=100] - Duration in ms
  @param {int} [V=5] - Volume in percent"
gcode:
  # Use a default 1kHz tone if S is omitted.
  {% set S = params.S|default(1000)|int %}
  # Use a 10ms duration is P is omitted.
  {% set P = params.P|default(100)|int %}
  # Use a 25% volume if V is omitted.
  # TODO: implement a logarithmic scale for volume
  {% set V = params.V|default(25)|int %}
  SET_PIN PIN=beeper VALUE={0.1 * (V / 100) if S > 0 else 1} CYCLE_TIME={ 1.0 / S if S > 0 else 1 }
  G4 P{P}
  SET_PIN PIN=beeper VALUE=0 CYCLE_TIME={ 0.001 }

[gcode_macro NOTE]
description:
  "Plays a specified note for a specified duration
  @param {string} [N=C5] - Note to play
  @param {int} [D=500] - Duration of note. There are currently some Klipper limitations to how short a note can be.
  @param {int} [V=25] - Volume in percent
  @param {bool} [S=true] - Whether or not to stop the note after duration"
gcode:
  {% set notes = {
    'C0': 16.35,   'CS0': 17.32,   'D0': 18.35,   'DS0': 19.45,   'E0': 20.60,   'F0': 21.83,   'FS0': 23.12,   'G0': 24.50,   'GS0': 25.96,   'A0': 27.50,   'AS0': 29.14,   'B0': 30.87,
    'C1': 32.70,   'CS1': 34.65,   'D1': 36.71,   'DS1': 38.89,   'E1': 41.20,   'F1': 43.65,   'FS1': 46.25,   'G1': 49.00,   'GS1': 51.91,   'A1': 55.00,   'AS1': 58.27,   'B1': 61.74,
    'C2': 65.41,   'CS2': 69.30,   'D2': 73.42,   'DS2': 77.78,   'E2': 82.41,   'F2': 87.31,   'FS2': 92.50,   'G2': 98.00,   'GS2': 103.83,  'A2': 110.00,  'AS2': 116.54,  'B2': 123.47,
    'C3': 130.81,  'CS3': 138.59,  'D3': 146.83,  'DS3': 155.56,  'E3': 164.81,  'F3': 174.61,  'FS3': 185.00,  'G3': 196.00,  'GS3': 207.65,  'A3': 220.00,  'AS3': 233.08,  'B3': 246.94,
    'C4': 261.63,  'CS4': 277.18,  'D4': 293.66,  'DS4': 311.13,  'E4': 329.63,  'F4': 349.23,  'FS4': 369.99,  'G4': 392.00,  'GS4': 415.30,  'A4': 440.00,  'AS4': 466.16,  'B4': 493.88,
    'C5': 523.25,  'CS5': 554.37,  'D5': 587.33,  'DS5': 622.25,  'E5': 659.26,  'F5': 698.46,  'FS5': 739.99,  'G5': 783.99,  'GS5': 830.61,  'A5': 880.00,  'AS5': 932.33,  'B5': 987.77,
    'C6': 1046.50, 'CS6': 1108.73, 'D6': 1174.66, 'DS6': 1244.51, 'E6': 1318.51, 'F6': 1396.91, 'FS6': 1479.98, 'G6': 1567.98, 'GS6': 1661.22, 'A6': 1760.00, 'AS6': 1864.66, 'B6': 1975.53,
    'C7': 2093.00, 'CS7': 2217.46, 'D7': 2349.32, 'DS7': 2489.02, 'E7': 2637.02, 'F7': 2793.83, 'FS7': 2959.96, 'G7': 3135.96, 'GS7': 3322.44, 'A7': 3520.00, 'AS7': 3729.31, 'B7': 3951.07,
    'C8': 4186.01, 'CS8': 4434.92, 'D8': 4698.64, 'DS8': 4978.03, 'E8': 5274.04, 'F8': 5587.65, 'FS8': 5919.91, 'G8': 6271.93, 'GS8': 6644.88, 'A8': 7040.00, 'AS8': 7458.62, 'B8': 7902.13,
  } %}
  # Use a default C5 if N is ommited.
  {% set note = params.N|default('C5')|string %}
  # Use a 500ms duration is D is omitted.
  {% set dur = params.D|default(500)|int %}
  # Use a 25% volume if V is omitted.
  # TODO: implement a logarithmic scale for volume
  {% set volume = params.V|default(25)|int %}
  # Stop the note by default (this can cause some timing issues)
  {% set stop = params.S|default('true')|string %}

  {% set freq = notes[note] %}

  SET_PIN PIN=beeper VALUE={0.1 * (volume / 100) if volume > 0 else 1} CYCLE_TIME={ 1.0 / freq }
  G4 P{dur}
  {% if stop|lower == 'true' %}
    SET_PIN PIN=beeper VALUE=0 CYCLE_TIME={ 0.001 }
  {% endif %}

[gcode_macro TONE_GEN]
description: "Used for the tone generator menu"
variable_tone_freq: 0.001093
gcode:
  M117 {printer["gcode_macro TONE_GEN"].tone_freq}nothz

[gcode_macro SONG_STAR_WARS_MAIN_THEME]
description: "Plays the Star Wars main theme"
gcode:
  NOTE N=D4 D=133
  NOTE N=D4 D=133
  NOTE N=D4 D=133
  NOTE N=G4 D=1000
  NOTE N=D5 D=1000

  NOTE N=C5 D=133
  NOTE N=B4 D=133
  NOTE N=A4 D=133
  NOTE N=G5 D=1000
  NOTE N=D5 D=500

  NOTE N=C5 D=133
  NOTE N=B4 D=133
  NOTE N=A4 D=133
  NOTE N=G5 D=1000
  NOTE N=D5 D=500

  NOTE N=C5 D=133
  NOTE N=B4 D=133
  NOTE N=C5 D=133
  NOTE N=A4 D=1000
  SET_PIN PIN=beeper VALUE=0 CYCLE_TIME={ 0.001 }

[gcode_macro SONG_WELLERMAN_SHANTY]
description: "Plays the Wellerman Shanty"
gcode:
  NOTE N=G3 D=480 V=15 S=1
  NOTE N=C3 D=480 V=15 S=1
  NOTE N=C3 D=240 V=15 S=1
  NOTE N=C3 D=240 V=15 S=1
  NOTE N=C3 D=480 V=15 S=1
  NOTE N=C3 D=240 V=15 S=1
  NOTE N=DS3 D=240 V=15 S=1
  NOTE N=G3 D=480 V=15 S=1
  NOTE N=G3 D=480 V=15 S=1
  NOTE N=G3 D=480 V=15 S=1
  NOTE N=G3 D=240 V=15 S=1
  NOTE N=G3 D=240 V=15 S=1
  NOTE N=GS3 D=480 V=15 S=1
  NOTE N=F3 D=240 V=15 S=1
  NOTE N=F3 D=240 V=15 S=1
  NOTE N=F3 D=480 V=15 S=1
  NOTE N=GS3 D=480 V=15 S=1
  NOTE N=C4 D=240 V=15 S=1
  NOTE N=C4 D=240 V=15 S=1
  NOTE N=G3 D=480 V=15 S=1
  NOTE N=G3 D=480 V=15 S=1
  # G4 P240
  # NOTE N=G3 D=340 V=15 S=1
  # NOTE N=C3 D=480 V=15 S=1
  # NOTE N=C3 D=480 V=15 S=1
  # NOTE N=C3 D=480 V=15 S=1
  # NOTE N=C3 D=240 V=15 S=1
  # NOTE N=DS3 D=240 V=15 S=1
  # NOTE N=G3 D=480 V=15 S=1
  # NOTE N=G3 D=480 V=15 S=1
  # NOTE N=G3 D=480 V=15 S=1
  # G4 P400
  # NOTE N=G3 D=600 V=15 S=1
  # NOTE N=F3 D=240 V=15 S=1
  # NOTE N=DS3 D=240 V=15 S=1
  # NOTE N=DS3 D=240 V=15 S=1
  # NOTE N=D3 D=480 V=15 S=1
  # NOTE N=C3 D=1200 V=15 S=1
  SET_PIN PIN=beeper VALUE=0 CYCLE_TIME={ 0.001 }

[gcode_macro SONG_CRAB_RAVE]
description: "Plays Crab Rave"
gcode:
  NOTE N=D6 D=150 V=30 S=1
  NOTE N=AS6 D=150 V=30 S=1
  NOTE N=G6 D=150 V=30 S=1
  NOTE N=G6 D=150 V=30 S=0
  NOTE N=D6 D=150 V=30 S=1
  NOTE N=D6 D=150 V=30 S=0
  NOTE N=A6 D=150 V=30 S=1
  NOTE N=F6 D=150 V=30 S=1
  NOTE N=F6 D=150 V=30 S=0
  NOTE N=D6 D=150 V=30 S=1
  NOTE N=D6 D=150 V=30 S=0
  NOTE N=A6 D=150 V=30 S=1
  NOTE N=F6 D=150 V=30 S=1
  NOTE N=F6 D=150 V=30 S=0
  NOTE N=C6 D=150 V=30 S=1
  NOTE N=C6 D=150 V=30 S=1
  NOTE N=E6 D=150 V=30 S=1
  NOTE N=E6 D=150 V=30 S=0
  NOTE N=F6 D=150 V=30 S=1
  NOTE N=F6 D=500 V=0 S=1
  SET_PIN PIN=beeper VALUE=0 CYCLE_TIME={ 0.001 }

# TODO: the timing kinda sucks
[gcode_macro SONG_NEVER_GONNA_GIVE_YOU_UP]
description: "Never gives you up"
gcode:
  NOTE N=C6 D=600 V=30 S=1
  NOTE N=D6 D=600 V=30 S=1
  NOTE N=G5 D=400 V=30 S=1
  NOTE N=D6 D=600 V=30 S=1
  NOTE N=E6 D=400 V=30 S=1
  #G4 P150
  #NOTE N=G6 D=180 V=30 S=0
  #NOTE N=F6 D=180 V=30 S=0
  #NOTE N=E6 D=180 V=30 S=0
  #NOTE N=D6 D=180 V=30 S=1
  #NOTE N=C6 D=600 V=30 S=1

  #NOTE N=D6 D=600 V=30 S=1
  #NOTE N=G5 D=400 V=30 S=1
  #NOTE N=D6 D=600 V=30 S=1
  #NOTE N=C6 D=600 V=30 S=1
  SET_PIN PIN=beeper VALUE=0 CYCLE_TIME={ 0.001 }

[gcode_macro SONG_DARUDE_SANDSTORM]
description: "What's that song?"
gcode:
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=650 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=650 V=30 S=1

  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=650 V=30 S=1

  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=650 V=30 S=1

  NOTE N=D4 D=150 V=30 S=1
  NOTE N=D4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=650 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=650 V=30 S=1

  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=650 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=650 V=30 S=1

  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=650 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=650 V=30 S=1

  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=150 V=30 S=1
  NOTE N=A4 D=650 V=30 S=1

  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=150 V=30 S=1
  NOTE N=G4 D=650 V=30 S=1

  NOTE N=D4 D=150 V=30 S=1
  NOTE N=D4 D=150 V=30 S=1

  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=150 V=30 S=1
  NOTE N=E4 D=650 V=30 S=1
  SET_PIN PIN=beeper VALUE=0 CYCLE_TIME={ 0.001 }

[gcode_macro SONG_MARIO_THEME]
gcode:
    M300 P137 S196
    M300 P138 S262
    M300 P139 S330
    M300 P137 S392
    M300 P138 S523
    M300 P139 S659
    M300 P393 S784
    M300 P393 S659
    #M300 P137 S208
    #M300 P138 S262
    #M300 P139 S311
    #M300 P137 S415
    #M300 P138 S523
    #M300 P139 S622
    #M300 P393 S831
    #M300 P393 S622
    #M300 P137 S233
    #M300 P138 S294
    #M300 P139 S349
    #M300 P137 S466
    #M300 P138 S587
    #M300 P139 S698
    #M300 P393 S932
    #M300 P137 S932
    #M300 P138 S932
    #M300 P139 S932
    #M300 P393 S659
